generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String         @id @default(uuid())
  fullName                  String
  email                     String         @unique
  password                  String
  profilePic                String?        @default("")
  passwordChangedAt         DateTime?
  isVerified                Boolean        @default(false)
  isResetPassword           Boolean        @default(false)
  canResetPassword          Boolean        @default(false)
  isResentOtp               Boolean        @default(false)
  role                      UserRole       @default(USER)
  isSubscribed              Boolean        @default(false)
  planExpiration            DateTime?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  resetPasswordOTP          String?
  resetPasswordOTPExpiresAt DateTime?
  Notifications             Notification[]
  Profile                   Profile?
  Submissions               Submission[]
  Subscription              Subscription?

  @@map("users")
}

model Plan {
  id            String         @id @default(uuid())
  planName      String
  amount        Float
  currency      String?
  interval      Interval       @default(month)
  intervalCount Int
  freeTrialDays Int?
  productId     String
  priceId       String
  active        Boolean
  description   String?
  features      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Subscription  Subscription[]

  @@map("plans")
}

model Subscription {
  id              String        @id @default(uuid())
  userId          String        @unique
  planId          String
  startDate       DateTime
  endDate         DateTime?
  amount          Float
  stripePaymentId String        @unique
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  plan            Plan          @relation(fields: [planId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  category    String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  batch       String?
  course      String
  department  String?
  institution String?
  year        String
  user        User      @relation(fields: [userId], references: [id])
}

model Scenario {
  id                 String          @id @default(uuid())
  title              String
  description        String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  additionalDocument Json?
  markingPointer     Json
  scenario           Json
  speech             Json
  submissions        Submission[]
  ReferenceAudio     ReferenceAudio?
}

model Submission {
  id         String @id @default(uuid())
  userId     String
  scenarioId String
  totalScore Int  @default(0)
  positive   String @default("")
  negative  String  @default("")
  improvement String  @default("")
  status    SubmissionStatus @default(COMPLETED)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  aiFeedback    AIFeedback?
  humanFeedback HumanFeedback?
  scenario      Scenario       @relation(fields: [scenarioId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}

model AIFeedback {
  id                  String     @id @default(uuid())
  submissionId        String     @unique
  generatedAt         DateTime   @default(now())
  analysis            Json
  overallScore        Float
  persuasivenessScore Float
  suggestions         Json
  submission          Submission @relation(fields: [submissionId], references: [id])
}

model HumanFeedback {
  id           String     @id @default(uuid())
  submissionId String     @unique
  comments     String
  createdAt    DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model DocumentPdf {
  id           String   @id @default(uuid())
  fileUrl      String
  createdAt    DateTime @default(now())
  uploadedAt   DateTime @default(now())
  filename     String
  mimetype     String
  originalname String
  size         Int
}

model ReferenceAudio {
  id              String    @id @default(uuid())
  audioScenarioId String    @unique
  audioUrl        String
  fileFormate     String
  size            Int
  createdAt       DateTime  @default(now())
  scenario        Scenario? @relation(fields: [audioScenarioId], references: [id])

  @@map("reference_audio")
}

enum NotificationType {
  SUBMISSION
  FEEDBACK
  REMINDER
  SYSTEM
}

enum SubmissionStatus {
  SUBMITTED
  EVALUATED
  COMPLETED
}

enum ScenarioStatus {
  SCHEDULED
  ACTIVE
  CLOSED
}

enum Interval {
  lifetime
  week
  month
  year
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum Status {
  PROCESSING
  COMPLETED
  FAILED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
